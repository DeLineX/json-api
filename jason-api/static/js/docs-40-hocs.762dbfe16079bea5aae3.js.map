{"version":3,"sources":["/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/docs/40-HOCS.mdx","/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/src/utils/Parameters.tsx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","parameters","name","required","description","default","isMDXComponent","Parameters","showDefaults","some","parameter","undefined","showRequired","Table","map","styled","table"],"mappings":"iZAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,iBAAQ,CACN,GAAM,mBADR,qBAGA,qBAAG,0BAAYC,WAAW,KAAvB,mBAAH,qHAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,46BAoCL,6CAA4B,0BAAYA,WAAW,KAAvB,gBAA5B,2CACF,0BAAYA,WAAW,KAAvB,+BADE,KAEA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,CAAC,CACvBC,KAAM,eACNC,UAAU,EACVC,YAAa,6FACZ,CACDF,KAAM,cACNC,UAAU,EACVC,YAAa,iCACbC,QAAS,cACR,CACDH,KAAM,wBACNC,UAAU,EACVC,YAAY,4PAKZC,QAAS,SACR,CACDH,KAAM,UACNC,UAAU,EACVC,YAAa,IACZ,CACDF,KAAM,YACNC,UAAU,EACVC,YAAa,KACXL,QAAQ,eACZ,iBAAQ,CACN,GAAM,YADR,cAGA,0PAE+D,0BAAYC,WAAW,KAAvB,QAF/D,+CAIA,gFAA+D,0BAAYA,WAAW,KAAvB,QAA/D,sBACC,0BAAYA,WAAW,KAAvB,mBADD,yCACsG,0BAAYA,WAAW,KAAvB,aADtG,kBAEF,0BAAYA,WAAW,KAAvB,YAFE,uCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2rBAyBL,iBAAQ,CACN,GAAM,kBADR,oBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,giBAuBL,iBAAQ,CACN,GAAM,aADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kzB,sKA6BTJ,EAAWU,gBAAiB,G,+tBCpL5B,IAAMC,EAAuD,SAAC,GAEvD,IADHN,EACE,EADFA,WAEMO,EAAeP,EAAWQ,MAC5B,SAAAC,GAAS,YAA0BC,IAAtBD,EAAS,WAGpBE,EAAeX,EAAWQ,MAC5B,SAAAC,GAAS,YAA2BC,IAAvBD,EAAUP,YAG3B,OACI,kBAACU,EAAD,KACI,+BACI,4BACI,oCACA,2CACCD,GAAgB,wCAChBJ,GAAgB,yCAIzB,+BACKP,EAAWa,KAAI,SAAAJ,GAAS,OACrB,4BACI,4BAAKA,EAAUR,MACf,4BAAKQ,EAAUN,aACdQ,GACG,4BAAKF,EAAUP,SAAW,MAAQ,MAErCK,GAAgB,4BAAKE,EAAS,gBAQxCH,M,8KAEf,IAAMM,EAAQE,IAAOC,MAAV","file":"static/js/docs-40-hocs.29927899.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Parameters from '../src/utils/Parameters.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"high-order-components\"\n    }}>{`High Order Components`}</h1>\n    <h2 {...{\n      \"id\": \"withautorequest\"\n    }}>{`withAutoRequest()`}</h2>\n    <p><inlineCode parentName=\"p\">{`withAutoRequest`}</inlineCode>{` triggers and manages JasonAPI actions. With it, you get caching,\nloading status management, and error handling.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { withAutoRequest, WithAutoRequestInjectedProps } from 'jason-api';\nimport { fetchUser } from './yourActions';\n\ninterface User extends WithAutoRequestInjectedProps<UserResource> {\n    id: string;\n}\n\nconst User = ({\n    request,\n    refetch, // Re-run your queryFactory.\n}) => {\n    const { status, response } = request;\n    return status === \"loading\" ? (\n        <p>Loading...</p>\n    ) : status === \"success\" ? (\n        <div>\n            <h1>\n                {response.data.attributes.firstName}\n                {response.data.attributes.lastName}\n            </h1>\n            <p>{response.data.attributes.email}</p>\n        </div>\n    ) : null;\n}\n\nconst enhance = withAutoRequest({\n    // fetchUser should return a JasonAPI request action.\n    actionFactory: ({ id }) => fetchUser(id),\n    expandResourceObjects: true,\n    propsToWatch: ['id'],\n});\n\nconst EnhancedUser = enhance(User);\n`}</code></pre>\n    <p>{`Now, you can use the `}<inlineCode parentName=\"p\">{`EnhancedUser`}</inlineCode>{` component wherever you may need them.\n`}<inlineCode parentName=\"p\">{`<EnhancedUser id=\"12345\" />`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h3>\n    <Parameters parameters={[{\n      name: 'queryFactory',\n      required: true,\n      description: \"A function that receives the Component' s props and returns a `jasonApiRequest()` action.\"\n    }, {\n      name: 'cacheScheme',\n      required: false,\n      description: 'How requests should be cached.',\n      default: 'cacheFirst'\n    }, {\n      name: 'expandResourceObjects',\n      required: false,\n      description: `\n                By default, response data will only include the \\`type\\` and \\`id\\` of the\n                resource object. This helps in optimization. If you would like to include\n                the full response, set this to \\`true\\`.\n            `,\n      default: 'false'\n    }, {\n      name: 'onError',\n      required: false,\n      description: ''\n    }, {\n      name: 'onSuccess',\n      required: false,\n      description: ''\n    }]} mdxType=\"Parameters\" />\n    <h2 {...{\n      \"id\": \"withitem\"\n    }}>{`withItem()`}</h2>\n    <p>{`Grab a previously fetched, single resource object from the JasonAPI redux store.\nYou can either explicity state the type and id of the resouce object you want\nto grab, or you can pass in a simplified resource object via the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` prop\nto get the expanded resource object.`}</p>\n    <p>{`Your Component will receive your resource object in the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` prop, similar\nto `}<inlineCode parentName=\"p\">{`withAutoRequest`}</inlineCode>{` above. However, you will not receive `}<inlineCode parentName=\"p\">{`isLoading`}</inlineCode>{`, etc., since\n`}<inlineCode parentName=\"p\">{`withItem`}</inlineCode>{` does not trigger an async request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { withItem } from 'jason-api';\n\nconst enhance = withItem<UserResource>({\n    // Optional if using the \\`data\\` prop method.\n    resourceType: 'users',\n\n    // Optional if you want to use the \\`id\\` or \\`data\\` prop methods shown below.\n    resourceId: '12345',\n});\n\nconst EnhancedUser = enhance(YourUserComponent);\n\n// If you included \\`resourceId\\` in your options.\n<EnhancedUser />\n\n// If you did not include \\`resourceId\\` in your options,\n// or you want to overwrite it.\n<EnhancedUser id=\"12345\" />\n\n// Useful for iterating over the Resource Identifiers\n// returned from a \\`withAutoRequest()\\` collection response.\n<EnhancedUser data={{ type: 'users', id: '12345' }} />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"withcollection\"\n    }}>{`withCollection()`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { withCollection, WithCollectionInjectedProps } from 'jason-api';\nimport { User } from './your-components';\nimport { UserResource } from './your-types';\n\ntype UserListProps = WithCollectionInjectedProps<UserResource>;\n\nconst UserList: React.FunctionComponent<UserListProps> = ({\n    data,\n}) => (\n    <div>\n        <h1>Users</h1>\n\n        {data.map(user => (\n            <User key={user.id} data={user} />\n        ))}\n    </div>\n);\n\nconst EnhancedUserList = withCollection({ resourceType: 'users' })(UserList);\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"options-1\"\n    }}>{`Options`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const enhance = withCollection({\n    resourceType: 'users',\n\n    // Optional if you want to set it dynamically with\n    // the \\`ids\\` prop on your enhanced Component.\n    ids: ['12345', '54321'],\n\n    // Unless set to \\`true\\`, your resource objects will be simplified\n    // and returned with only the \\`type\\` and \\`id\\` props. You will get\n    // more effecient React renders if you iterate over these and use\n    // \\`withItem\\` to fetch the complete data on the item-level.\n    expandResourceObjects: false,\n});\n\nconst EnhancedUsers = enhance(Users);\n\n// If you included \\`ids\\` in your options above, those will be returned.\n// If not, all resource objects of the given type will be returned.\n<EnhancedUsers />\n\n// If you want to set id's dynamically.\n<EnhancedUsers ids={['12345', '54321']} />\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import styled from 'styled-components';\nimport React from 'react';\n\ninterface ParametersProps {\n    parameters: ParametrConfig[];\n}\n\ninterface ParametrConfig {\n    default?: string;\n    description: string;\n    name: string;\n    required?: boolean;\n}\n\nconst Parameters: React.FunctionComponent<ParametersProps> = ({\n    parameters,\n}) => {\n    const showDefaults = parameters.some(\n        parameter => parameter.default !== undefined\n    );\n\n    const showRequired = parameters.some(\n        parameter => parameter.required !== undefined\n    );\n\n    return (\n        <Table>\n            <thead>\n                <tr>\n                    <td>Name</td>\n                    <td>Description</td>\n                    {showRequired && <td>Required</td>}\n                    {showDefaults && <td>Default</td>}\n                </tr>\n            </thead>\n\n            <tbody>\n                {parameters.map(parameter => (\n                    <tr>\n                        <td>{parameter.name}</td>\n                        <td>{parameter.description}</td>\n                        {showRequired && (\n                            <td>{parameter.required ? 'Yes' : 'No'}</td>\n                        )}\n                        {showDefaults && <td>{parameter.default}</td>}\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n};\n\nexport default Parameters;\n\nconst Table = styled.table`\n    td {\n        padding: 1em;\n    }\n\n    thead {\n        font-weight: bold;\n\n        td {\n            background-color: #808080;\n            color: #fff;\n        }\n    }\n\n    tbody {\n        td {\n            background-color: #f7f7f7;\n        }\n\n        tr:nth-child(even) td {\n            background-color: #f0f0f0;\n        }\n    }\n`;\n"],"sourceRoot":""}