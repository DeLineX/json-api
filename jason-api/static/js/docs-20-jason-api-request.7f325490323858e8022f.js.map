{"version":3,"sources":["/Users/rmarganti/code/_packages+libraries/json-api.old/packages/jason-api/docs/20-JASON-API-REQUEST.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4XAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,+GACY,0BAAYC,WAAW,KAAvB,OADZ,8HAEiE,0BAAYA,WAAW,KAAvB,gBAFjE,SAGE,0BAAYA,WAAW,KAAvB,cAHF,0EAIM,0BAAYA,WAAW,KAAvB,aAJN,QAIoE,0BAAYA,WAAW,KAAvB,SAJpE,YAKA,8OAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,q8BAqCL,iBAAQ,CACN,GAAM,2BADR,6BAGA,4BAAW,0BAAYA,WAAW,KAAvB,qBAAX,kFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gJASL,qHACA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2yF,mLAsETJ,EAAWK,gBAAiB","file":"static/js/docs-20-jason-api-request.19b8da50.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"talking-to-an-api\"\n    }}>{`Talking to an API`}</h1>\n    <p>{`Below is a couple simple examples of action creators. The only required\nattributes is `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{`. This will make a request to the given URL, normalize\nthe response, and update the store. Additionally, since we set the `}<inlineCode parentName=\"p\">{`resourceType`}</inlineCode>{`\nand `}<inlineCode parentName=\"p\">{`resourceId`}</inlineCode>{`, the meta data for that particular entity will be updated to\nreflect `}<inlineCode parentName=\"p\">{`isLoading`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` status.`}</p>\n    <p>{`JasonAPI action creators also play nice with our Higher Order Components,\nenabling intelligent caching, error-handling, and much more. There's plenty\nof additional, helpful options; so be sure to check the WIKI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { jasonApiRequest } from 'jason-api';\n\nconst getUser = userId =>\n    jasonApiRequest({\n        url: \\`/api/users/\\${userId}\\`,\n        resourceType: 'users',\n        resourceId: userId,\n    });\n\n/**\n * NOTE: Since our payload contains the \\`type\\` and \\`id\\`, we can\n * choose to skip including those options like we did above.\n */\nconst updateUser = (userId, attributes) =>\n    jasonApiRequest({\n        url: \\`/api/users/\\${userId}\\`,\n        method: 'post',\n        payload: {\n            data: {\n                type: 'users',\n                id: userId,\n                attributes,\n            },\n        },\n    });\n\n// JASON_API_REQUEST action creators return a Promise when dispatched.\ndispatch(getUser('12345')).then(response =>\n    console.log(response.data.attributes.firstName)\n);\n\n// Or Use Await if that's your thing\nconst result = await dispatch(updateUser('12345', { firstName: 'Enrique' }));\nconsole.log(result);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jasonapirequest-options\"\n    }}>{`jasonApiRequest() Options`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`jasonApiRequest()`}</inlineCode>{` action creator triggers an api call. A basic get request only requires a url.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { jasonApiRequest } from 'jason-api';\n\nconst fetchBook = id =>\n    jasonApiRequest({\n        url: \\`/api/books/\\${id}\\`,\n    });\n`}</code></pre>\n    <p>{`There are plenty of other options, however, for customizing your requests with minimal code.`}</p>\n    <h2 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n    // Defaults to 'get'\n    method: 'get'|'post'|'patch'|'delete',\n\n    // API route to hit\n    url: <STRING>,\n\n    // Optional payload to json-encode and pass along\n    payload: <OBJECT>,\n\n    // Additional headers to send along with the network request\n    additionalHeaders: <OBJECT>,\n\n    // If included without entityId, \\`loading\\` & \\`error\\` meta data is set for this entity type\n    entityType: <STRING>,\n\n    // If included with entityType, \\`loading\\` & \\`error\\` meta data is set for this specific entity\n    entityId: <STRING>,\n\n    // Optional function to call on success\n    onSuccess: (response, { state, dispatch }) => void,\n\n    // Do not dispatch the startLoadingActionCreator, if one was set using the \\`jsonApiMiddlewareFactory\\`\n    disableStartLoadingActionCreator: <BOOLEAN>,\n\n    // Optional function or response-code mapped object of functions to call on error.\n    onError: (response, { state, dispatch }) => void,\n\n    // If set to true, \\`displayErrorActionCreator\\` that was set using the\n    // \\`jsonApiMiddlewareFactory\\` will be dispatched in the event of an error.\n    displayNotificationOnError: <BOOLEAN>,\n\n    // By default, the JasonAPI middleware will throw a \\`JSONAPIError\\` when receiving\n    // a non-200 response. If this is set to \\`true\\`, that error will not be thrown.\n    suppressError: <BOOLEAN>,\n\n    // Set a relationship or relationships on success. Accepts an Resource Identifier\n    // (object with \\`type\\` and \\`id\\`), array of Resource Identifiers, or a JSON API Response).\n    // If the last options is omitted, it will use the JSON response. Will completely\n    // replace existing relationship(s).\n    setRelationshipOnSuccess: [entityType, entityId, relationshipType, resourceIdentifier(s)/response],\n\n    // Add a relationship or relationships on success. Accepts an Resource Identifier\n    // (object with \\`type\\` and \\`id\\`), array of Resource Identifiers, or a JSON API Response).\n    // If the last options is omitted, it will use the JSON response. Will completely\n    // replace existing relationship(s).\n    addRelationshipOnSuccess: [entityType, entityId, relationshipType, resourceIdentifier(s)/response],\n\n    // Remove a relationship on success. Ideal for one-to-many relationships.\n    removeRelationshipOnSuccess: [entityType, entityId, relationshipType, relationshipId],\n\n    // Remove an entity from the store on success\n    removeEntityOnSuccess: [entityType, entityId],\n\n    // Update an entity on success. Note that any\n    // JSON API response will automatically be applied.\n    updateEntityOnSuccess: [entityType, entityId, payload],\n\n    // Optional function to transform incoming server\n    // response before it is processed by the middleware.\n    // It should return a valid JSON API response.\n    transformer: <FUNCTION>\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}