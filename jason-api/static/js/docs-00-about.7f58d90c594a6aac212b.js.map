{"version":3,"sources":["/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/docs/00-ABOUT.mdx","/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/docs/imgs/header.png"],"names":["layoutProps","MDXContent","components","props","mdxType","alt","src","require","parentName","isMDXComponent","module","exports"],"mappings":"gXAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,qBAAG,mBAAKC,IAAI,OAAOC,IAAKC,EAAQ,6BAChC,iBAAQ,CACN,GAAM,YADR,YAGA,+CAA8B,+BAAGC,WAAW,KAAQ,CAChD,KAAQ,wBADkB,qBAA9B,oCAIA,iBAAQ,CACN,GAAM,gCADR,kCAGA,uRAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qoD,uKAwETP,EAAWQ,gBAAiB,G,yCC5G5BC,EAAOC,QAAU,IAA0B","file":"static/js/docs-00-about.ab0f04c7.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><img alt=\"Logo\" src={require(\"./imgs/header.png\")} /></p>\n    <h1 {...{\n      \"id\": \"jasonapi\"\n    }}>{`JasonAPI`}</h1>\n    <p>{`Consume and manipulate `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsonapi.org/\"\n      }}>{`JSON API standard`}</a>{`\ndata in Redux with scary ease.`}</p>\n    <h2 {...{\n      \"id\": \"a-basic-but-powerful-example\"\n    }}>{`A Basic (But Powerful) Example`}</h2>\n    <p>{`Below is a simple example. Hopefully, it should demonstrate how the individual\npieces play together. With just a little bit of code, you get JSON API-compliant\napi calls, caching, loading status management, error-handling, and efficient\nReact renders.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import * as React from 'react';\nimport { jasonApiRequest, useAutoRequest, useItem } from 'jason-api';\nimport { ResourceObject } from 'ts-json-api';\n\nexport interface ArticleResource extends ResourceObject {\n    type: 'articles';\n    attributes: {\n        title: string;\n        body: string;\n    };\n}\n\nconst fetchArticles = () =>\n    jasonApiRequest<ArticleResource[]>({\n        url: '/api/articles',\n    });\n\n// This component will automatically initiate a\n// request to get a list of an Articles on mount.\nexport const ArticlesList = () => {\n    const [request, refetch] = useAutoRequest({\n        action: fetchArticles(),\n    });\n\n    switch (request.state) {\n        case 'loading':\n            return <YourLoadingComponent />;\n\n        case 'error':\n            return <YourErrorsComponent errors={request.error} />;\n\n        case 'success':\n            return (\n                <div>\n                    <h1>Articles</h1>\n                    {request.response.data.map(article => (\n                        <Article id={article.id} />\n                    ))}\n                </div>\n            );\n\n        default:\n            return null;\n    }\n};\n\ninterface ArticleProps {\n    id: string;\n}\n\n// This component will grab available Article data from the reduce store.\nconst Article: React.FunctionComponent<ArticleProps> = ({ id }) => {\n    const article = useItem<ArticleResource>('articles', id);\n\n    if (!article) {\n        return null;\n    }\n\n    return (\n        <div>\n            <h2>{article.attributes.title}</h2>\n            <p>{article.attributes.body}</p>\n        </div>\n    );\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","module.exports = __webpack_public_path__ + \"static/img/header.68fdb05f.png\";"],"sourceRoot":""}