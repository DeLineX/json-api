{"version":3,"sources":["/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/docs/10-SETUP.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gXAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,yCADR,yCAGA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,4aAeL,iBAAQ,CACN,GAAM,8BADR,8BAGA,wFAAuE,0BAAYA,WAAW,KAAvB,qBAAvE,wFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8a,uKAgBTJ,EAAWK,gBAAiB","file":"static/js/docs-10-setup.3705bc8c.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"hooking-up-the-reducer-and-middleware\"\n    }}>{`Hooking up the reducer and middleware`}</h1>\n    <h2 {...{\n      \"id\": \"basic-setup\"\n    }}>{`Basic setup`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {\n    middleware as jasonApiMiddleware,\n    reducer as jasonApi,\n} from 'jason-api';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport * as yourReducers from './reducers';\n\nconst store = createStore(\n    // It is necessary that JasonAPI's reducer is specifically named \\`jasonApi\\`.\n    combineReducers({ ...yourReducers, jasonApi }),\n    applyMiddleware(jasonApiMiddleware)\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customizing-the-middleware\"\n    }}>{`Customizing the middleware`}</h3>\n    <p>{`If you would like to customize the JasonAPI middleware, use the `}<inlineCode parentName=\"p\">{`middlewareFactory`}</inlineCode>{`. It accepts accepts action creators that will be triggered at the approriate times.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { middlewareFactory } from 'jason-api';\n\nconst jasonApiMiddleware = middlewareFactory({\n    startLoadingActionCreator: () => ({ type: 'START_LOADING' }),\n    stopLoadingActionCreator: () => ({ type: 'STOP_LOADING' }),\n    displayErrorActionCreator: (errorMessage) => ({ type: 'START_LOADING', message: errorMessage }),\n    authenticationExpiredActionCreator: () => ({ type: 'AUTHENTICATION_EXPIRED' }),\n});\n\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}