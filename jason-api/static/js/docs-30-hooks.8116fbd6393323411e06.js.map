{"version":3,"sources":["/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/docs/30-HOOKS.mdx","/Users/rmarganti/code/_packages+libraries/json-api/packages/jason-api/src/utils/Parameters.tsx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","parameters","name","required","description","default","isMDXComponent","Parameters","showDefaults","some","parameter","undefined","showRequired","Table","map","styled","table"],"mappings":"8WAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,SADR,SAGA,kIACkB,0BAAYC,WAAW,KAAvB,qBADlB,gCAEA,iBAAQ,CACN,GAAM,cADR,gBAGA,qBAAG,0BAAYA,WAAW,KAAvB,gBAAH,yCAAqG,0BAAYA,WAAW,KAAvB,qBAArG,wIAEU,0BAAYA,WAAW,KAAvB,UAFV,oDAEiH,0BAAYA,WAAW,KAAvB,qBAFjH,wGAIA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6jBAoBL,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYC,WAAY,CAAC,CACvBC,KAAM,iBACNC,UAAU,EACVC,YAAa,4EACXL,QAAQ,eACZ,iBAAQ,CACN,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAYE,WAAY,CAAC,CACvBC,KAAM,SACNC,UAAU,EACVC,YAAa,8CACZ,CACDF,KAAM,cACNC,UAAU,EACVC,YAAa,iCACbC,QAAS,cACR,CACDH,KAAM,wBACNC,UAAU,EACVC,YAAY,4PAKZC,QAAS,SACR,CACDH,KAAM,UACNC,UAAU,EACVC,YAAa,yFACZ,CACDF,KAAM,YACNC,UAAU,EACVC,YAAa,8FACXL,QAAQ,eACZ,iBAAQ,CACN,GAAM,YADR,YAGA,qBAAG,0BAAYC,WAAW,KAAvB,cAAH,mMAEA,YAAC,IAAD,CAAYC,WAAY,CAAC,CACvBC,KAAM,SACNE,YAAa,oDACZ,CACDF,KAAM,QACNE,YAAa,iEACZ,CACDF,KAAM,WACNE,YAAa,yEACXL,QAAQ,eACZ,iBAAQ,CACN,GAAM,kBADR,oBAGA,2CAA0B,0BAAYC,WAAW,KAAvB,gBAA1B,wMAGA,iBAAQ,CACN,GAAM,aADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,grBAyBL,iBAAQ,CACN,GAAM,WADR,aAGA,uFACA,iBAAQ,CACN,GAAM,aADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2fA4BL,iBAAQ,CACN,GAAM,iBADR,mBAGA,sFACA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAYC,WAAY,CAAC,CACvBC,KAAM,eACNC,UAAU,EACVC,YAAa,qFACZ,CACDF,KAAM,cACNC,UAAU,EACVC,YAAa,oGACZ,CACDF,KAAM,wBACNC,UAAU,EACVC,YAAa,uHACXL,QAAQ,eACZ,iBAAQ,CACN,GAAM,aADR,WAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,2b,uKA0BTJ,EAAWU,gBAAiB,G,2rBCtN5B,IAAMC,EAAuD,SAAC,GAEvD,IADHN,EACE,EADFA,WAEMO,EAAeP,EAAWQ,MAC5B,SAAAC,GAAS,YAA0BC,IAAtBD,EAAS,WAGpBE,EAAeX,EAAWQ,MAC5B,SAAAC,GAAS,YAA2BC,IAAvBD,EAAUP,YAG3B,OACI,kBAACU,EAAD,KACI,+BACI,4BACI,oCACA,2CACCD,GAAgB,wCAChBJ,GAAgB,yCAIzB,+BACKP,EAAWa,KAAI,SAAAJ,GAAS,OACrB,4BACI,4BAAKA,EAAUR,MACf,4BAAKQ,EAAUN,aACdQ,GACG,4BAAKF,EAAUP,SAAW,MAAQ,MAErCK,GAAgB,4BAAKE,EAAS,gBAQxCH,M,8KAEf,IAAMM,EAAQE,IAAOC,MAAV","file":"static/js/docs-30-hooks.65c4aeff.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Parameters from '../src/utils/Parameters.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h1>\n    <p>{`Hooks are the easiest way to work with JasonAPI. They provide a means for initiating\nrequests created by `}<inlineCode parentName=\"p\">{`jasonApiRequest()`}</inlineCode>{` and retriving the response.`}</p>\n    <h2 {...{\n      \"id\": \"userequest\"\n    }}>{`useRequest()`}</h2>\n    <p><inlineCode parentName=\"p\">{`useRequest()`}</inlineCode>{` is the primary hook for working with `}<inlineCode parentName=\"p\">{`jasonApiRequest()`}</inlineCode>{`-initiated requests.\nIt accepts a single parameter: an options object. At the bare minimum, your options object should\ninclude the `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` property with the action to execute (created by `}<inlineCode parentName=\"p\">{`jasonApiRequest()`}</inlineCode>{`). It will\nreturn a tuple containing info about the request and a callback to initiate the request.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const SimpleComponent: React.FunctionComponent = () => {\n    const [explodeSunRequest, makeExplodeSunRequest] = useRequest(\n        // explodeSun() is an action created by \\`jasonApiRequest()\\` and defined elsewhere.\n        { action: explodeSun() } \n    );\n\n    return (\n        <div>\n            {\n                explodeSunRequest.status === 'success' && \n                    <pre>{JSON.stringify(explodeSunRequest.response)}</pre>\n            }\n\n            <button onClick={makeExplodeSunRequest}>Explode the Sun!</button>\n        </div>\n    );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <Parameters parameters={[{\n      name: 'requestOptions',\n      required: true,\n      description: 'An object containing all the options for your request. Described below.'\n    }]} mdxType=\"Parameters\" />\n    <h3 {...{\n      \"id\": \"requestoptions-shape\"\n    }}>{`requestOptions Shape`}</h3>\n    <Parameters parameters={[{\n      name: 'action',\n      required: true,\n      description: 'The `jasonApiRequest()` action to execute.'\n    }, {\n      name: 'cacheScheme',\n      required: false,\n      description: 'How requests should be cached.',\n      default: 'cacheFirst'\n    }, {\n      name: 'expandResourceObjects',\n      required: false,\n      description: `\n                By default, response data will only include the \\`type\\` and \\`id\\` of the\n                resource object. This helps in optimization. If you would like to include\n                the full response, set this to \\`true\\`.\n            `,\n      default: 'false'\n    }, {\n      name: 'onError',\n      required: false,\n      description: 'A callback function that will receive the error response object when an error occurs.'\n    }, {\n      name: 'onSuccess',\n      required: false,\n      description: 'A callback function that will receive the response body object upon a successful request.'\n    }]} mdxType=\"Parameters\" />\n    <h3 {...{\n      \"id\": \"response\"\n    }}>{`Response`}</h3>\n    <p><inlineCode parentName=\"p\">{`useRequest`}</inlineCode>{` will return a tuple (a two-item array) containing (1) an object with info about the request\nand (2) a function to initiate the request. The request info object has the following properties.`}</p>\n    <Parameters parameters={[{\n      name: 'status',\n      description: \"Either 'idle', 'loading', 'success', or 'error'.\"\n    }, {\n      name: 'error',\n      description: \"The error response body. Only present if `status` is 'error'.\"\n    }, {\n      name: 'response',\n      description: \"The successful response body. Only present if `status` is 'success'.\"\n    }]} mdxType=\"Parameters\" />\n    <h2 {...{\n      \"id\": \"useautorequest\"\n    }}>{`useAutoRequest()`}</h2>\n    <p>{`This is similar to `}<inlineCode parentName=\"p\">{`useRequest()`}</inlineCode>{`, but handles triggering the request automatically. This is useful,\nfor example, for auto-triggering a request on component mount. The request will also be re-triggered\nwhen the action changes. `}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface ArticlesListProps {\n    page: number;\n}\n\nconst ArticlesList: React.FunctionComponent<ArticlesListProps> = ({ page }) => {\n    const [fetchArticlesRequest, refetchArticles] = useRequest(\n        // fetchArticles() is an action created by \\`jasonApiRequest()\\` and defined elsewhere.\n        { action: fetchArticles() } \n    );\n\n    return (\n        <div>\n            {fetchArticlesRequest.status === 'success' && {\n                fetchArticles.response.data.map(\n                    article => <Article id={article.id} />\n                )\n            }}\n\n            <button onClick={refetchArticles}>Refetch Articles</button>\n        </div>\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useitem\"\n    }}>{`useItem()`}</h2>\n    <p>{`Pull a single JSON API resource object out of the Redux store.`}</p>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface PersonResource extends ResourceObject {\n    type: 'people';\n    attributes: {\n        firstName: string;\n        lastName: string;\n    };\n}\n\ninterface AuthorProps {\n    id: string;\n}\n\nconst Author: React.SFC<AuthorProps> = ({ id }) => {\n    const author = useItem<PersonResource>('people', id);\n\n    if (!author) {\n        return null;\n    }\n\n    return (\n        <div>\n            {author.attributes.firstName} {author.attributes.lastName}\n        </Root>\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usecollection\"\n    }}>{`useCollection()`}</h2>\n    <p>{`Pull a collection of Resource Objects out of the Redux store.`}</p>\n    <h3 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h3>\n    <Parameters parameters={[{\n      name: 'resourceType',\n      required: true,\n      description: 'The type of resource object. Comes for the `type` property from the API response.'\n    }, {\n      name: 'resourceIds',\n      required: false,\n      description: \"An array of resource ID's to grab. Will grab all Resource Objects of the given type if ommitted.\"\n    }, {\n      name: 'expandResourceObjects',\n      required: false,\n      description: \"Should the full data for the resource objects be returned? If `false`, only Resource Identifiers will be returned.\"\n    }]} mdxType=\"Parameters\" />\n    <h3 {...{\n      \"id\": \"example-3\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface ArticlesResource extends ResourceObject {\n    type: 'articles';\n    attributes: {\n        title: string;\n        content: string;\n    };\n}\n\nconst Articles: React.SFC<AuthorProps> = () => {\n    const allArticles = useCollection<ArticlesResource>('articles');\n\n    return (\n        <div>\n            {articles.map(\n                article => <Article id={article.id} />\n            )}\n        </div>\n    );\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import styled from 'styled-components';\nimport React from 'react';\n\ninterface ParametersProps {\n    parameters: ParametrConfig[];\n}\n\ninterface ParametrConfig {\n    default?: string;\n    description: string;\n    name: string;\n    required?: boolean;\n}\n\nconst Parameters: React.FunctionComponent<ParametersProps> = ({\n    parameters,\n}) => {\n    const showDefaults = parameters.some(\n        parameter => parameter.default !== undefined\n    );\n\n    const showRequired = parameters.some(\n        parameter => parameter.required !== undefined\n    );\n\n    return (\n        <Table>\n            <thead>\n                <tr>\n                    <td>Name</td>\n                    <td>Description</td>\n                    {showRequired && <td>Required</td>}\n                    {showDefaults && <td>Default</td>}\n                </tr>\n            </thead>\n\n            <tbody>\n                {parameters.map(parameter => (\n                    <tr>\n                        <td>{parameter.name}</td>\n                        <td>{parameter.description}</td>\n                        {showRequired && (\n                            <td>{parameter.required ? 'Yes' : 'No'}</td>\n                        )}\n                        {showDefaults && <td>{parameter.default}</td>}\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n};\n\nexport default Parameters;\n\nconst Table = styled.table`\n    td {\n        padding: 1em;\n    }\n\n    thead {\n        font-weight: bold;\n\n        td {\n            background-color: #808080;\n            color: #fff;\n        }\n    }\n\n    tbody {\n        td {\n            background-color: #f7f7f7;\n        }\n\n        tr:nth-child(even) td {\n            background-color: #f0f0f0;\n        }\n    }\n`;\n"],"sourceRoot":""}