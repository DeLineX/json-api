{"version":3,"sources":["/home/rmarganti/code/json-api/packages/jason-api/docs/50-ACTIONS.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kXAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,uNAEA,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,gJAQL,iBAAQ,CACN,GAAM,iCADR,iCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,w3CAuEL,iBAAQ,CACN,GAAM,4CADR,4CAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wSAcL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wW,yKAkBTJ,EAAWK,gBAAiB","file":"static/js/docs-50-actions.5318b98e.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h1>\n    <p>{`While JasonAPI shines when it can manage locally-stored data itself, sometimes you'll need to\nupdate it yourself. Below are a handful of action creators that will allow you to do just that.`}</p>\n    <h2 {...{\n      \"id\": \"consuming-json-data\"\n    }}>{`Consuming JSON data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { loadJsonApiResourceObjectData } from 'jason-api';\n\ndispatch(\n    loadJsonApiResourceObjectData(jsonApiResponseFromServer)\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"manipulating-resource-objects\"\n    }}>{`Manipulating resource objects`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {\n    addRelationshipToResourceObject,\n    removeRelationshipFromResourceObject,\n    updateResourceObject,\n} from 'jason-api';\n\n/**\n * Example: \n *\n * dispatch(updateResourceObject('article', articleId, {\n *     isUserFavorite: true\n * }));\n */\ndispatch(\n    updateResourceObject(resourceObjectKey, resourceObjectId, dataObject)\n);\n\n/**\n * Example:\n *\n * dispatch(addRelationshipToResourceObject('article', '54321', 'readers', {\n *     type: 'user',\n *     id: '12345',\n *     attributes: { name: \"Bob Ross\" }\n * }));\n */\ndispatch(\n    addRelationshipToResourceObject(\n        resourceObjectKey,\n        resourceObjectId,\n        relationshipKey,\n        relationshipJsonApiObject\n    )\n);\n\n/**\n * Example:\n *\n * You can also add relationships by ID.\n * dispatch(addRelationshipToResourceObject(\n *     'article', '54321', 'readers', '12345'\n * ));\n */\ndispatch(\n    addRelationshipToResourceObject(\n        resourceObjectKey,\n        resourceObjectId,\n        relationshipKey,\n        relationshipJsonApiObject\n    )\n);\n\n/**\n * Example:\n *\n * dispatch(removeRelationshipFromResourceObject(\n *     'article', '54321', 'readers', '12345'\n * ));\n */\ndispatch(\n    removeRelationshipFromResourceObject(\n        resourceObjectKey,\n        resourceObjectId,\n        relationshipKey,\n        relationshipId\n    );\n    \\`\\`\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-resource-objects-from-the-store\"\n    }}>{`Removing resource objects from the store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { removeResourceObject, clearResourceObjectType } from 'jason-api';\n\n// Remove a single resource object\ndispatch(\n    removeResourceObject('articles', '1')\n);\n\n// Remove all resource objects from an resource object type\ndispatch(\n    clearResourceObjectType('articles')\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"metadata\"\n    }}>{`Metadata`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { updateResourceObjectsMeta, updateResourceObjectMeta } from 'jason-api';\n\n// Set a metadata value for a resource object type\ndispatch(\n    updateResourceObjectsMeta('articles', 'isLoading', true)\n);\n\n// Set a metadata value for a specific resource object\ndispatch(\n    updateResourceObjectMeta('articles', '123', 'isLoading', true)\n);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}